<ui:composition xmlns="http://www.w3.org/1999/xhtml"
 xmlns:ui="http://java.sun.com/jsf/facelets"
 xmlns:f="http://java.sun.com/jsf/core"
 xmlns:m="http://code.google.com/p/gmaps4jsf/"
 xmlns:p="http://primefaces.org/ui"
 xmlns:h="http://java.sun.com/jsf/html" template="/home.xhtml"
 xmlns:jsf="http://xmlns.jcp.org/jsf">

 <ui:define name="pageCSS">
  <h:outputStylesheet library="css" name="bootstrap.min.css" />
  <h:outputStylesheet library="font-awesome" name="css/font-awesome.css" />
  <h:outputStylesheet library="css" name="plugins/iCheck/custom.css" />
  <h:outputStylesheet library="css"
   name="plugins/steps/jquery.steps.css" />
  <h:outputStylesheet library="css" name="animate.css" />
  <h:outputStylesheet library="css" name="style.css" />
  <style>
p {
 text-align: center;
 font-size: 60px;
 margin-top: 0px;
}
</style>
  <script
   src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDc3QZUxX-9y1OPFwmeUyMUQnMXRmt0h2c"></script>


 </ui:define>

 <ui:define name="titleHere">
  <div class="col-lg-6">

   <div class="ibox float-e-margins">
    <div class="ibox-title">
     <h5>Add a new Sale Opportunity</h5>
     <div class="ibox-tools">
      <a class="collapse-link"> <i class="fa fa-chevron-up"></i>
      </a> <a class="dropdown-toggle" data-toggle="dropdown" href="#"> <i
       class="fa fa-wrench"></i>
      </a>
      <ul class="dropdown-menu dropdown-user">
       <li><a href="#">Config option 1</a></li>
       <li><a href="#">Config option 2</a></li>
      </ul>
      <a class="close-link"> <i class="fa fa-times"></i>
      </a>
     </div>
    </div>
    <div class="ibox-content no-padding">

     <ul class="list-group">
      <h:form>
       <li class="list-group-item"><label>Sale
         Opportunity's name *</label> <h:inputText
         value="#{saleOpportunityBean.nameSaleOpportunity}"
         styleClass="form-control required" /></li>


       <li class="list-group-item"><label>Product *</label> <h:outputText
         value="&#160;" /> <h:selectOneMenu
         value="#{saleOpportunityBean.id_product}">
         <f:selectItem itemLabel="select product" itemValue="" />
         <f:selectItems value="#{productBean.products}" var="product"
          itemValue="#{product.id_Product}"
          itemLabel="#{product.nomProduit}" />
        </h:selectOneMenu></li>
       <li class="list-group-item"><label>Budget *</label> <h:inputText
         value="#{saleOpportunityBean.budgetNeeded}"
         styleClass="form-control required" /></li>


       <li class="list-group-item">
        <div align="center">
         <h:commandButton value="add Sale Opportunity"
          action="#{saleOpportunityBean.addSaleOpp()}"
          styleClass="btn btn-primary" />
        </div>
       </li>


      </h:form>
     </ul>
    </div>
   </div>
  </div>


  <p:growl id="messages" showDetail="true" />
  <div
   style="margin-left: auto; margin-right: 0; width: 50%; height: 400px; position: relative; overflow: hidden;">
   <p:gmap id="gmap" center="36.890257,30.707417" zoom="2"
    type="ROADMAP" style="width:100%;height:400px"
    model="#{addMarkersView.emptyModel}"
    onPointClick="handlePointClick(event);" widgetVar="map" />


  </div>

  <p:dialog widgetVar="dlg" showEffect="fade">
   <h:form prependId="false">
    <h:panelGrid columns="2">
     <h:outputLabel for="title" value="Title:" />
     <p:inputText id="title" value="#{addMarkersView.title}" />

     <f:facet name="footer">
      <p:commandButton value="Add"
       actionListener="#{addMarkersView.addMarker}" update=":messages"
       oncomplete="markerAddComplete()" />
      <p:commandButton value="Cancel" onclick="return cancel()" />
     </f:facet>
    </h:panelGrid>

    <h:inputHidden id="lat" value="#{addMarkersView.lat}" />
    <h:inputHidden id="lng" value="#{addMarkersView.lng}" />
   </h:form>
  </p:dialog>

  <script type="text/javascript">
    var currentMarker = null;
 
    function handlePointClick(event) {
        if(currentMarker === null) {
            document.getElementById('lat').value = event.latLng.lat();
            document.getElementById('lng').value = event.latLng.lng();
 

 
            currentMarker = new google.maps.Marker({
                position:new google.maps.LatLng(event.latLng.lat(), event.latLng.lng())
            });
 
            PF('map').addOverlay(currentMarker);
 
            PF('dlg').show();
        }   
    }
 
    function markerAddComplete() {
        var title = document.getElementById('title');
        currentMarker.setTitle(title.value);
        title.value = "";
 
        currentMarker = null;
        PF('dlg').hide();
    }
 
    function cancel() {
        PF('dlg').hide();
        currentMarker.setMap(null);
        currentMarker = null;
 
        return false;
    }
</script>

 </ui:define>
 <ui:define name="pageJS">
  <h:outputScript library="js" name="jquery-2.1.1.js"></h:outputScript>
  <h:outputScript library="js" name="bootstrap.min.js"></h:outputScript>
  <h:outputScript library="js"
   name="plugins/metisMenu/jquery.metisMenu.js"></h:outputScript>
  <h:outputScript library="js"
   name="plugins/slimscroll/jquery.slimscroll.min.js"></h:outputScript>


  <!-- Custom and plugin javascript -->

  <h:outputScript library="js" name="inspinia.js"></h:outputScript>
  <h:outputScript library="js" name="plugins/pace/pace.min.js"></h:outputScript>


  <!-- Steps -->
  <h:outputScript library="js" name="plugins/staps/jquery.steps.min.js"></h:outputScript>

  <!-- Jquery Validate -->
  <h:outputScript library="js"
   name="plugins/validate/jquery.validate.min.js"></h:outputScript>


  <!-- Chosen -->
  <h:outputScript library="js" name="plugins/chosen/chosen.jquery.js"></h:outputScript>


  <!-- iCheck -->
  <h:outputScript library="js" name="plugins/iCheck/icheck.min.js"></h:outputScript>

  <!-- MENU -->
  <h:outputScript library="js"
   name="plugins/metisMenu/jquery.metisMenu.js"></h:outputScript>



  <h:outputScript>
        // <![CDATA[
         $(document).ready(function(){
            $("#wizard").steps();
            $("#form").steps({
                bodyTag: "fieldset",
                enableFinishButton: false,
                onStepChanging: function (event, currentIndex, newIndex)
                {
                    // Always allow going backward even if the current step contains invalid fields!
                    if (currentIndex > newIndex)
                    {
                        return true;
                    }

                    // Forbid suppressing "Warning" step if the user is to young
                    if (newIndex === 3 && Number($("#age").val()) < 18)
                    {
                        return false;
                    }

                    var form = $(this);

                    // Clean up if user went backward before
                    if (currentIndex < newIndex)
                    {
                        // To remove error styles
                        $(".body:eq(" + newIndex + ") label.error", form).remove();
                        $(".body:eq(" + newIndex + ") .error", form).removeClass("error");
                    }

                    // Disable validation on fields that are disabled or hidden.
                    form.validate().settings.ignore = ":disabled,:hidden";

                    // Start validation; Prevent going forward if false
                    return form.valid();
                },
                onStepChanged: function (event, currentIndex, priorIndex)
                {
                    // Suppress (skip) "Warning" step if the user is old enough.
                    if (currentIndex === 2 && Number($("#age").val()) >= 18)
                    {
                        $(this).steps("next");
                    }

                    // Suppress (skip) "Warning" step if the user is old enough and wants to the previous step.
                    if (currentIndex === 2 && priorIndex === 3)
                    {
                        $(this).steps("previous");
                    }
                },
                onFinishing: function (event, currentIndex)
                {
                },
                onFinished: function (event, currentIndex)
                {
                }
            }).validate({
                        errorPlacement: function (error, element)
                        {
                            element.before(error);
                        },
                        rules: {
                            confirm: {
                                equalTo: "#password"
                            }
                        }
                    });
       });
        // ]]>
  </h:outputScript>
 </ui:define>
</ui:composition>
