<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html" template="/home.xhtml"
	xmlns:x="http://xmlns.jcp.org/jsf/passthrough"
	xmlns:b="http://bootsfaces.net/ui" xmlns:jsf="http://xmlns.jcp.org/jsf"
	xmlns:p="http://primefaces.org/ui">

	<ui:define name="pageCSS">
		<h:outputStylesheet library="css" name="bootstrap.min.css" />
		<h:outputStylesheet library="font-awesome" name="css/font-awesome.css" />
		<h:outputStylesheet library="css" name="plugins/iCheck/custom.css" />
		<h:outputStylesheet library="css"
			name="plugins/steps/jquery.steps.css" />
		<h:outputStylesheet library="css" name="animate.css" />
		<h:outputStylesheet library="css" name="style.css" />

	</ui:define>

	<ui:define name="titleHere">
		<div class="row wrapper border-bottom white-bg page-heading">
			<div class="col-sm-4">
				<h2>Put your title here</h2>
				<ol class="breadcrumb">
					<li><a href="home.jsf">home</a></li>
					<li class="active"><strong>item management</strong></li>
				</ol>
			</div>
			<div class="col-sm-8">
				<div class="title-action">
					<a href="#" class="btn btn-primary">action </a>
				</div>
			</div>
		</div>


		<!--	here -->


		<div class="row">
			<div class="col-lg-12">
				<div class="wrapper wrapper-content animated fadeInUp">

					<div class="ibox">

						<div class="ibox-content">


							<div class="project-list">
								<h:form>
									<p:dataTable var="breakdown"
										value="#{maintenanceBean.breakdowns}"
										widgetVar="breakdownsTable"
										emptyMessage="No breakdowns found with given criteria"
										filteredValue="#{maintenanceBean.filteredbreakdown}">



										<p:column filterBy="#{breakdown.objecttomaintain.name}"
											headerText="Item Name">
											<h:outputText value="#{breakdown.objecttomaintain.name}" />
										</p:column>

										<p:column filterBy="#{breakdown.breakdowndate}"
											headerText="Date">
											<f:facet name="filter">
												<p:spinner onchange="PF('breakdownsTable').filter()"
													styleClass="mounth-spinner">
												</p:spinner>
											</f:facet>
											<h:outputText value="#{breakdown.breakdowndate}" />
										</p:column>

										<!--  		<p:column filterBy="#{breakdown.objecttomaintain.name}"
											headerText="Item's name">
											<f:facet name="filter">
												<p:selectOneMenu onchange="PF('breakdownsTable').filter()">
													<f:selectItem itemLabel="Select One" itemValue="#{null}"
														noSelectionOption="true" />
													<f:selectItems value="#{maintenanaceBean.items}" />
												</p:selectOneMenu>
											</f:facet>
											<h:outputText value="#{breakdown.objecttomaintain.name}" />
										</p:column> -->


						<!--  				<p:column filterBy="#{breakdown.breakdownstate}"
											headerText="Status">
											<f:facet name="filter">
												<p:selectOneButton onchange="PF('breakdownTable').filter()">
													<f:selectItem itemLabel="Treated" itemValue="TREATED" />
													<f:selectItem itemLabel="Untreated" itemValue="UNTREATED" />
												</p:selectOneButton>
											</f:facet>
											<h:outputText value="#{breakdown.breakdownstate}" />
										</p:column> -->
											<p:column filterBy="#{breakdown.breakdownstate}"
											headerText="Status">
											<h:outputText value="#{breakdown.breakdownstate}" />
										</p:column>
										<p:column filterBy="#{breakdown.repairer.name}"
											headerText="Treated By">
											<h:outputText value="#{breakdown.repairer.name}" />
										</p:column>

										<p:column filterBy="#{breakdown.price}" headerText="Price"
											filterFunction="#{maintenanceBean.filterByPrice}">
											<h:outputText value="#{breakdown.price}">
												<f:convertNumber currencySymbol="$" type="currency" />
											</h:outputText>
										</p:column>
										<p:column headerText="Action">
											<a jsf:styleClass="btn btn-white btn-sm"
												jsf:action="#{maintenanceBean.toBreakdownEdit(breakdown.id)}"><i
												class="fa fa-pencil"></i> Edit </a>
											<a
												jsf:action="#{maintenanceBean.deleteBreakdown(breakdown.id)}"
												jsf:styleClass="btn btn-white btn-sm"> <i
												class="fa fa-trash"></i> Delete
											</a>
										</p:column>



									</p:dataTable>

								
								</h:form>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<!-- 	/here -->


	</ui:define>
	<ui:define name="pageJS">
		<h:outputScript library="js" name="jquery-2.1.1.js"></h:outputScript>
		<h:outputScript library="js" name="bootstrap.min.js"></h:outputScript>
		<h:outputScript library="js"
			name="plugins/metisMenu/jquery.metisMenu.js"></h:outputScript>
		<h:outputScript library="js"
			name="plugins/slimscroll/jquery.slimscroll.min.js"></h:outputScript>


		<!-- Custom and plugin javascript -->

		<h:outputScript library="js" name="inspinia.js"></h:outputScript>
		<h:outputScript library="js" name="plugins/pace/pace.min.js"></h:outputScript>



		<!-- Steps -->
		<h:outputScript library="js" name="plugins/staps/jquery.steps.min.js"></h:outputScript>

		<!-- Jquery Validate -->
		<h:outputScript library="js"
			name="plugins/validate/jquery.validate.min.js"></h:outputScript>


		<!-- Chosen -->
		<h:outputScript library="js" name="plugins/chosen/chosen.jquery.js"></h:outputScript>


		<!-- iCheck -->
		<h:outputScript library="js" name="plugins/iCheck/icheck.min.js"></h:outputScript>

		<!-- MENU -->
		<h:outputScript library="js"
			name="plugins/metisMenu/jquery.metisMenu.js"></h:outputScript>


		<h:outputScript>
		// <![CDATA[
		 $(document).ready(function(){
            $("#wizard").steps();
            $("#form").steps({
                bodyTag: "fieldset",
                enableFinishButton: false,
                onStepChanging: function (event, currentIndex, newIndex)
                {
                    // Always allow going backward even if the current step contains invalid fields!
                    if (currentIndex > newIndex)
                    {
                        return true;
                    }

                    // Forbid suppressing "Warning" step if the user is to young
                    if (newIndex === 3 && Number($("#age").val()) < 18)
                    {
                        return false;
                    }

                    var form = $(this);

                    // Clean up if user went backward before
                    if (currentIndex < newIndex)
                    {
                        // To remove error styles
                        $(".body:eq(" + newIndex + ") label.error", form).remove();
                        $(".body:eq(" + newIndex + ") .error", form).removeClass("error");
                    }

                    // Disable validation on fields that are disabled or hidden.
                    form.validate().settings.ignore = ":disabled,:hidden";

                    // Start validation; Prevent going forward if false
                    return form.valid();
                },
                onStepChanged: function (event, currentIndex, priorIndex)
                {
                    // Suppress (skip) "Warning" step if the user is old enough.
                    if (currentIndex === 2 && Number($("#age").val()) >= 18)
                    {
                        $(this).steps("next");
                    }

                    // Suppress (skip) "Warning" step if the user is old enough and wants to the previous step.
                    if (currentIndex === 2 && priorIndex === 3)
                    {
                        $(this).steps("previous");
                    }
                },
                onFinishing: function (event, currentIndex)
                {
                },
                onFinished: function (event, currentIndex)
                {
                }
            }).validate({
                        errorPlacement: function (error, element)
                        {
                            element.before(error);
                        },
                        rules: {
                            confirm: {
                                equalTo: "#password"
                            }
                        }
                    });
       });
        // ]]>
		</h:outputScript>
	</ui:define>
</ui:composition>
