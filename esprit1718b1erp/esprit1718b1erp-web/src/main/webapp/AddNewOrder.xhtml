<ui:composition xmlns="http://www.w3.org/1999/xhtml"
 xmlns:ui="http://java.sun.com/jsf/facelets"
 xmlns:f="http://java.sun.com/jsf/core"
 xmlns:m="http://code.google.com/p/gmaps4jsf/"
 xmlns:p="http://primefaces.org/ui"
 xmlns:h="http://java.sun.com/jsf/html" template="/home.xhtml"
 xmlns:jsf="http://xmlns.jcp.org/jsf">

 <ui:define name="pageCSS">
  <h:outputStylesheet library="css" name="bootstrap.min.css" />
  <h:outputStylesheet library="font-awesome" name="css/font-awesome.css" />
  <h:outputStylesheet library="css" name="plugins/iCheck/custom.css" />
  <h:outputStylesheet library="css"
   name="plugins/steps/jquery.steps.css" />
  <h:outputStylesheet library="css" name="animate.css" />
  <h:outputStylesheet library="css" name="style.css" />
  <style>
p {
 text-align: center;
 font-size: 60px;
 margin-top: 0px;
}
</style>
  <script
   src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDc3QZUxX-9y1OPFwmeUyMUQnMXRmt0h2c"></script>
  <script type="text/javascript">
function checkPasswords() {
	var x = document.getElementById("sel").value;
	var y = document.getElementById(x);
        y.style.visibility = "visible";

    
}
function handleChange() {
	var x = document.getElementById("sel").value;
    var y = document.getElementById(x);
        y.style.visibility = "visible";}
function handleChange1(selection,s1) {
    // Do something here with selection...
    
    var y = "a"+s1+".0";
    var  x= document.getElementById(y).innerHTML ;
    var z = selection *s1 ;
    document.getElementById(y).innerHTML = z;
    

}

</script>

 </ui:define>

 <ui:define name="titleHere">
  <div class="row">
   <div class="col-lg-12">
    <div class="wrapper wrapper-content animated fadeInUp">

     <div class="ibox">
      <div class="ibox-title">
       <h5>New Order for a contact :</h5>
       <div class="ibox-tools">
        <label>Product * </label>
        <h:outputText value="&#160;" />
        <h:selectOneMenu id="sel"
         value="#{saleOpportunityBean.id_product}"
         onchange="handleChange();">
         <f:selectItem itemLabel="select product" itemValue="" />
         <f:selectItems value="#{productBean.products}" var="product"
          itemValue="#{product.nomProduit}"
          itemLabel="#{product.nomProduit}" />

        </h:selectOneMenu>
        <h:outputText value="&#160;" />


       </div>
       <div class="ibox-tools">
        <label>Contact * </label>
        <h:outputText value="&#160;" />
        <h:selectOneMenu value="#{saleOpportunityBean.id_product}">
         <f:selectItem itemLabel="select Contact" itemValue="" />
         <f:selectItems value="#{contactBean.contacts}" var="contact"
          itemValue="#{contact.id}" itemLabel="#{contact.name}" />

        </h:selectOneMenu>
        <h:outputText value="&#160;" />


       </div>

      </div>
      <div class="ibox-content">
       <div class="project-list">
        <h:form>
         <table id="tb1" class="table table-hover">
          <tbody>
           <tr>
            <th>Product Name</th>
            <th>Unit Price</th>
            <th>Stock</th>
            <th>Choose amount</th>
            <th>Total</th>

           </tr>
           <ui:repeat var="item" value="#{productBean.products}">
            <tr style="visibility: hidden" id="#{item.nomProduit}">
             <td class="project-status">#{item.nomProduit}</td>



             <td class="project-title">#{item.prixUnitaire}</td>


             <td class="project-title" id="ayt">#{item.qte}</td>


             <td><h:selectOneMenu value="#{commandeBean.amount}"
               onchange="handleChange1(this.value,#{item.prixUnitaire})">
               <f:selectItem itemLabel="select Amount " itemValue="" />
               <f:selectItems value="#{commandeBean.list}" var="qt"
                itemValue="#{qt}" itemLabel="#{qt}" />
              </h:selectOneMenu></td>

             <td class="price" id="a#{item.prixUnitaire}">0.0</td>


            </tr>
           </ui:repeat>
          </tbody>
         </table>
         
        </h:form>
       </div>
      </div>
     </div>
    </div>
   </div>

  </div>
  <div class="col-lg-4"></div>


  <p:growl id="messages" showDetail="true" />


  <p:dialog widgetVar="dlg" showEffect="fade">
   <h:form prependId="false">
    <h:panelGrid columns="2">
     <h:outputLabel for="title" value="Title:" />
     <p:inputText id="title" value="#{addMarkersView.title}" />

     <f:facet name="footer">
      <p:commandButton value="Add"
       actionListener="#{addMarkersView.addMarker}" update=":messages"
       oncomplete="markerAddComplete()" />
      <p:commandButton value="Cancel" onclick="return cancel()" />
     </f:facet>
    </h:panelGrid>

    <h:inputHidden id="lat" value="#{addMarkersView.lat}" />
    <h:inputHidden id="lng" value="#{addMarkersView.lng}" />
   </h:form>
  </p:dialog>



 </ui:define>
 <ui:define name="pageJS">
  <h:outputScript library="js" name="jquery-2.1.1.js"></h:outputScript>
  <h:outputScript library="js" name="bootstrap.min.js"></h:outputScript>
  <h:outputScript library="js"
   name="plugins/metisMenu/jquery.metisMenu.js"></h:outputScript>
  <h:outputScript library="js"
   name="plugins/slimscroll/jquery.slimscroll.min.js"></h:outputScript>


  <!-- Custom and plugin javascript -->

  <h:outputScript library="js" name="inspinia.js"></h:outputScript>
  <h:outputScript library="js" name="plugins/pace/pace.min.js"></h:outputScript>


  <!-- Steps -->
  <h:outputScript library="js" name="plugins/staps/jquery.steps.min.js"></h:outputScript>

  <!-- Jquery Validate -->
  <h:outputScript library="js"
   name="plugins/validate/jquery.validate.min.js"></h:outputScript>


  <!-- Chosen -->
  <h:outputScript library="js" name="plugins/chosen/chosen.jquery.js"></h:outputScript>


  <!-- iCheck -->
  <h:outputScript library="js" name="plugins/iCheck/icheck.min.js"></h:outputScript>

  <!-- MENU -->
  <h:outputScript library="js"
   name="plugins/metisMenu/jquery.metisMenu.js"></h:outputScript>



  <h:outputScript>
        // <![CDATA[
         $(document).ready(function(){
            $("#wizard").steps();
            $("#form").steps({
                bodyTag: "fieldset",
                enableFinishButton: false,
                onStepChanging: function (event, currentIndex, newIndex)
                {
                    // Always allow going backward even if the current step contains invalid fields!
                    if (currentIndex > newIndex)
                    {
                        return true;
                    }

                    // Forbid suppressing "Warning" step if the user is to young
                    if (newIndex === 3 && Number($("#age").val()) < 18)
                    {
                        return false;
                    }

                    var form = $(this);

                    // Clean up if user went backward before
                    if (currentIndex < newIndex)
                    {
                        // To remove error styles
                        $(".body:eq(" + newIndex + ") label.error", form).remove();
                        $(".body:eq(" + newIndex + ") .error", form).removeClass("error");
                    }

                    // Disable validation on fields that are disabled or hidden.
                    form.validate().settings.ignore = ":disabled,:hidden";

                    // Start validation; Prevent going forward if false
                    return form.valid();
                },
                onStepChanged: function (event, currentIndex, priorIndex)
                {
                    // Suppress (skip) "Warning" step if the user is old enough.
                    if (currentIndex === 2 && Number($("#age").val()) >= 18)
                    {
                        $(this).steps("next");
                    }

                    // Suppress (skip) "Warning" step if the user is old enough and wants to the previous step.
                    if (currentIndex === 2 && priorIndex === 3)
                    {
                        $(this).steps("previous");
                    }
                },
                onFinishing: function (event, currentIndex)
                {
                },
                onFinished: function (event, currentIndex)
                {
                }
            }).validate({
                        errorPlacement: function (error, element)
                        {
                            element.before(error);
                        },
                        rules: {
                            confirm: {
                                equalTo: "#password"
                            }
                        }
                    });
       });
        // ]]>
  </h:outputScript>
 </ui:define>
</ui:composition>
