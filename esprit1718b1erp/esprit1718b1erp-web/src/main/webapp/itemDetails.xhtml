<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html" template="/home.xhtml"
	xmlns:jsf="http://xmlns.jcp.org/jsf">

	<ui:define name="pageCSS">
		<h:outputStylesheet library="css" name="bootstrap.min.css" />
		<h:outputStylesheet library="font-awesome" name="css/font-awesome.css" />
		<h:outputStylesheet library="css" name="plugins/iCheck/custom.css" />
		<h:outputStylesheet library="css"
			name="plugins/steps/jquery.steps.css" />
		<h:outputStylesheet library="css" name="animate.css" />
		<h:outputStylesheet library="css" name="style.css" />

	</ui:define>

	<ui:define name="titleHere">
		<div class="row wrapper border-bottom white-bg page-heading">
			<div class="col-sm-4">
				<h2>Put your title here</h2>
				<ol class="breadcrumb">
					<li><a href="home.jsf">home</a></li>
					<li class="active"><strong>item management</strong></li>
				</ol>
			</div>
			<div class="col-sm-8">
				<div class="title-action">
					<a href="itemDisplay.jsf" class="btn btn-primary">View All
						items </a>
				</div>
			</div>
		</div>


		<!--	here -->

		<div class="row">
			<div class="col-lg-9">
				<div class="wrapper wrapper-content animated fadeInUp">
					<div class="ibox">
						<div class="ibox-content">
							<div class="row">
								<div class="col-lg-12">
									<div class="m-b-md">
										<h:form>
											<a jsf:styleClass="btn btn-white btn-xs pull-right"
												jsf:action="#{itemBean.toItemEdit(itemBean.itemDetails.id)}">
												Edit item </a>
										</h:form>

										<h2>#{itemBean.itemDetails.name}</h2>
									</div>
									<dl class="dl-horizontal">
										<dt>Status:</dt>
										<dd>

											<ui:fragment
												rendered="#{itemBean.itemDetails.quantity gt itemBean.itemDetails.minimumQuanity}">
												<span class="label label-primary">no action required
												</span>
											</ui:fragment>
											<ui:fragment
												rendered="#{itemBean.itemDetails.quantity lt itemBean.itemDetails.minimumQuanity }">
												<span class="label label-danger">action required </span>
											</ui:fragment>
											<ui:fragment
												rendered="#{itemBean.itemDetails.quantity eq itemBean.itemDetails.minimumQuanity }">
												<span class="label label-warning">action recommended
												</span>
											</ui:fragment>
											<ui:fragment
												rendered="#{itemBean.itemDetails.minimumQuanity eq null }">
												<span class="label label-plain">status unavailable </span>
											</ui:fragment>

										</dd>
									</dl>
								</div>
							</div>
							<div class="row">
								<div class="col-lg-5">
									<dl class="dl-horizontal">

										<dt>Created by:</dt>
										<dd>#{itemBean.itemDetails.user.name}</dd>
										<dt>Client:</dt>
										<dd>
											<a href="#" class="text-navy"> Zender Company</a>
										</dd>
										<dt>Version:</dt>
										<dd>v1.4.2</dd>
									</dl>
								</div>
								<div class="col-lg-7" id="cluster_info">
									<dl class="dl-horizontal">

										<dt>quantity</dt>
										<dd>#{itemBean.itemDetails.quantity}</dd>
									</dl>
								</div>
							</div>
							<div class="row">
								<div class="col-lg-12">
									<dl class="dl-horizontal">
										<dt>Status:</dt>
										<dd>
											<div class="progress progress-striped active">
										
										<div style="width: #{(itemBean.itemDetails.minimumQuanity*100)/itemBean.itemDetails.quantity}% "
											class="progress-bar progress-bar-warning">
											#{(itemBean.itemDetails.minimumQuanity*100) / itemBean.itemDetails.quantity}%
										</div>
									</div>
											<small>minimum quantity represents <strong>#{(itemBean.itemDetails.minimumQuanity*100) / itemBean.itemDetails.quantity}%</strong>
												Of the quantity of #{itemBean.itemDetails.name} .
											</small>
										</dd>
									</dl>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="col-lg-3">
				<div class="wrapper wrapper-content project-manager">
					<h4>Item description</h4>
					<img src="resources/img/#{itemBean.itemDetails.picture}"
						height="340" width="226" class="img-responsive" />
					<p class="small">#{itemBean.itemDetails.description}</p>
					<p class="small font-bold">
						<span><i class="fa fa-circle text-warning"></i> High
							priority</span>
					</p>
				</div>
			</div>
		</div>

		<!-- 	/here -->


	</ui:define>
	<ui:define name="pageJS">
		<h:outputScript library="js" name="jquery-2.1.1.js"></h:outputScript>
		<h:outputScript library="js" name="bootstrap.min.js"></h:outputScript>
		<h:outputScript library="js"
			name="plugins/metisMenu/jquery.metisMenu.js"></h:outputScript>
		<h:outputScript library="js"
			name="plugins/slimscroll/jquery.slimscroll.min.js"></h:outputScript>


		<!-- Custom and plugin javascript -->

		<h:outputScript library="js" name="inspinia.js"></h:outputScript>
		<h:outputScript library="js" name="plugins/pace/pace.min.js"></h:outputScript>


		<!-- Steps -->
		<h:outputScript library="js" name="plugins/staps/jquery.steps.min.js"></h:outputScript>

		<!-- Jquery Validate -->
		<h:outputScript library="js"
			name="plugins/validate/jquery.validate.min.js"></h:outputScript>


		<!-- Chosen -->
		<h:outputScript library="js" name="plugins/chosen/chosen.jquery.js"></h:outputScript>


		<!-- iCheck -->
		<h:outputScript library="js" name="plugins/iCheck/icheck.min.js"></h:outputScript>

		<!-- MENU -->
		<h:outputScript library="js"
			name="plugins/metisMenu/jquery.metisMenu.js"></h:outputScript>



		<h:outputScript>
		// <![CDATA[
		 $(document).ready(function(){
            $("#wizard").steps();
            $("#form").steps({
                bodyTag: "fieldset",
                enableFinishButton: false,
                onStepChanging: function (event, currentIndex, newIndex)
                {
                    // Always allow going backward even if the current step contains invalid fields!
                    if (currentIndex > newIndex)
                    {
                        return true;
                    }

                    // Forbid suppressing "Warning" step if the user is to young
                    if (newIndex === 3 && Number($("#age").val()) < 18)
                    {
                        return false;
                    }

                    var form = $(this);

                    // Clean up if user went backward before
                    if (currentIndex < newIndex)
                    {
                        // To remove error styles
                        $(".body:eq(" + newIndex + ") label.error", form).remove();
                        $(".body:eq(" + newIndex + ") .error", form).removeClass("error");
                    }

                    // Disable validation on fields that are disabled or hidden.
                    form.validate().settings.ignore = ":disabled,:hidden";

                    // Start validation; Prevent going forward if false
                    return form.valid();
                },
                onStepChanged: function (event, currentIndex, priorIndex)
                {
                    // Suppress (skip) "Warning" step if the user is old enough.
                    if (currentIndex === 2 && Number($("#age").val()) >= 18)
                    {
                        $(this).steps("next");
                    }

                    // Suppress (skip) "Warning" step if the user is old enough and wants to the previous step.
                    if (currentIndex === 2 && priorIndex === 3)
                    {
                        $(this).steps("previous");
                    }
                },
                onFinishing: function (event, currentIndex)
                {
                },
                onFinished: function (event, currentIndex)
                {
                }
            }).validate({
                        errorPlacement: function (error, element)
                        {
                            element.before(error);
                        },
                        rules: {
                            confirm: {
                                equalTo: "#password"
                            }
                        }
                    });
       });
        // ]]>
		</h:outputScript>
	</ui:define>
</ui:composition>
